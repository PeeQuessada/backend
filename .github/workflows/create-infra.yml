name: Create aws resource using terraform
env:
  CI: ""
on:
  workflow_dispatch:

jobs:
  apply:
    name: 'terraform apply'
    runs-on: ubuntu-20.04

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - name: Create AWS Auth
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.REGION }}

      # - name: Create AWS Auth2
      #   working-directory: terraform/create-aws-infra
      #   run: | 
      #     mkdir -p ~/.aws
      #     echo "[default]" >> ~/.aws/config
      #     echo "aws_access_key_id = \"${{ secrets.AWS_ACCESS_KEY_ID }}\"" >> ~/.aws/config
      #     echo "aws_secret_access_key = \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"" >> ~/.aws/config
      #     echo "aws_session_token = \"${{ secrets.AWS_SESSION_TOKEN }}\"" >> ~/.aws/config
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.6.1    
      
      - name: Define terraform vars
        working-directory: terraform/
        run: |
          ls
          echo "access_key = \"${{ secrets.AWS_ACCESS_KEY_ID }}\"" >> terraform.tfvars
          echo "secret_key = \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"" >> terraform.tfvars
          echo "session_token = \"${{ secrets.AWS_SESSION_TOKEN }}\"" >> terraform.tfvars
          echo "user_id = \"${{ secrets.AWS_USER_ID }}\"" >> terraform.tfvars
          echo "image_version = \"${{ github.run_id }}\"" >> terraform.tfvars
          echo "region = \"${{ vars.REGION }}\"" >> terraform.tfvars
          echo "prefix = \"${{ vars.PREFIX }}\"" >> terraform.tfvars
          echo "repository_name = \"${{ vars.REPOSITORY_NAME }}\"" >> terraform.tfvars
          echo "cluster_name = \"${{ vars.CLUSTER_NAME }}\"" >> terraform.tfvars
          echo "bucket_name = \"${{ vars.BUCKET }}\"" >> terraform.tfvars

      # - name: Create S3 Bucket using terraform
      #   working-directory: terraform/create-aws-bucket
      #   run: | 
      #     terraform init
      #     terraform apply -auto-approve -var-file=../terraform.tfvars   
      #     cp terraform.tfstate ../create-aws-infra

      - name: Create infra using terraform
        working-directory: terraform/create-aws-infra
        run: | 
          export AWS_PROFILE=default
          terraform init
          terraform apply -auto-approve -var-file=../terraform.tfvars   

      #### Deploy app ####
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      #   with:
      #     registries: ${{ secrets.AWS_USER_ID }}
      #     mask-password: "true"

      # - name: Publish docker image on ERS
      #   working-directory: app/
      #   shell: bash
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/${{ vars.REPOSITORY_NAME }}:${{ github.run_id }} .
      #     docker push $ECR_REGISTRY/${{ vars.REPOSITORY_NAME }}:${{ github.run_id }}

      # - name: Deploy application to EKS using terraform
      #   working-directory: terraform/deploy-k8s/
      #   run: |
      #     terraform init
      #     terraform apply -auto-approve -var-file=../terraform.tfvars